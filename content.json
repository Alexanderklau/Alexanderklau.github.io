{"meta":{"title":"Yemilice","subtitle":null,"description":null,"author":"Yemilice lau","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Elasticsearch for python API模块化封装","slug":"Elasticsearch-for-python-API模块化封装","date":"2019-10-25T01:57:50.000Z","updated":"2019-10-25T02:34:26.358Z","comments":true,"path":"2019/10/25/Elasticsearch-for-python-API模块化封装/","link":"","permalink":"http://yoursite.com/2019/10/25/Elasticsearch-for-python-API%E6%A8%A1%E5%9D%97%E5%8C%96%E5%B0%81%E8%A3%85/","excerpt":"","text":"Elasticsearch for python API模块化封装模块的具体功能 检测Elasticsearch节点是否畅通 查询Elasticsearch节点健康状态 查询包含的关键字的日志（展示前10条） 查询指定的索引下的数据，并且分页 输出所有日志(输出全部) 输出去重后的日志(分页，带关键字） 删除指定索引的值 往索引中添加数据 获取指定index、type、id对应的数据 更新指定index、type、id所对应的数据 批量插入数据 使用方法一般作为独立的包进行导入，并且对其进行了大数据预览的优化和处理作为一个独立Python模块进行导入，并且调取接口使用。调用方法 12import elasticdb.es_sysdb as esesdb = es.Es() 使用举例打印出索引（表）内的所有数据：需要index名，也就是指定索引名，在这里，假设我要查所有的monlog数据，那么查询语句如: 123a = esdb.search_all(client=esdb.conn, index=monlog, type=\"doc\")for i in a: c.append(i[\"_source\"][\"message\"]) 接口详情接口参数说明 参数 必选 类型 说明 index ture str 索引名 ，可认为是数据库 type true str 索引类型，可认为是表名 keywords ture str 关键字 page ture str 页数，分页逻辑 size ture str 每页展示条数，分页逻辑使用 查询包含的关键字的日志（展示前10条）123a = esdb.search_searchdoc(index=monlog, type=\"doc\", keywords=\"cpu\")for i in a: print i[\"_source\"][\"message\"] 查询指定的索引下的数据，并且分页示例：查询index为”oplog-2018-08,oplog-2018-12”，并且每页展示（size）5条，输出第二页（page） 12for i in esdb.serch_by_index(index=\"oplog-2018-08,oplog-2018-12\", page=2, size=5)[\"hits\"][\"hits\"]: print(i[\"_source\"][\"message\"]) 输出所有日志(输出全部)12for i in esdb.search_all(client=esdb.conn, index=\"monlog-*\", type=\"doc\"): print i 输出去重后的日志(分页，带关键字）示例：关键字为空，搜索monlog的所有数据，展示第一页，并且每页展示10条 12for i in esdb.serch_es_count(keywords = \"\", index=\"monlog-*\", type=\"doc\",page=1, size=10): print i 删除指定索引的值示例：删除monlog的所有值 1esdb.delete_all_index(index=\"monlog-*\", type=\"doc\") 查询集群健康状态1esdb.check_health() 往索引中添加数据12body = &#123;\"name\": 'lucy2', 'sex': 'female', 'age': 10&#125;print esdb.insertDocument(index='demo', type='test', body=body) 获取指定index、type、id对应的数据1print esdb.getDocById(index='demo', type='test', id='6gsqT2ABSm0tVgi2UWls') 更新指定index、type、id所对应的数据12body = &#123;\"doc\": &#123;\"name\": 'jackaaa'&#125;&#125;#修改部分字段print esdb.updateDocById('demo', 'test', 'z', body) 批量插入数据12345678910_index = 'demo'_type = 'test_df'import pandas as pdframe = pd.DataFrame(&#123;'name': ['tomaaa', 'tombbb', 'tomccc'], 'sex': ['male', 'famale', 'famale'], 'age': [3, 6, 9], 'address': [u'合肥', u'芜湖', u'安徽']&#125;)print esAction.insertDataFrame(_index, _type, frame) 代码示例1234567891011121314151617181920212223242526272829303132333435363738394041424344from elasticsearch import Elasticsearchfrom elasticsearch import helpersclass Es: def __init__(self): self.hosts = \"127.0.0.1\" self.conn = Elasticsearch(hosts=self.hosts, port=9200) def check(self): ''' 输出当前系统的ES信息 ''' return self.conn.info() def ping(self): return self.conn.ping() def check_health(self): ''' 检查集群的健康状态 :return: ''' status = self.conn.transport.perform_request('GET', '/_cluster/health', params=None)[\"status\"] return statuu def get_index(self): return self.conn.indices.get_alias(\"*\") def search_specify(self, index=None, type=None, keywords=None, page=None, size=None): # 查询包含的关键字的日志 query = &#123; 'query': &#123; 'match': &#123; 'message': keywords &#125; &#125;, 'from':page * size, 'size':size &#125; message = self.searchDoc(index, type, query) return message 完整的代码地址：https://github.com/Alexanderklau/elasticdb","categories":[],"tags":[{"name":"前后端","slug":"前后端","permalink":"http://yoursite.com/tags/%E5%89%8D%E5%90%8E%E7%AB%AF/"}],"keywords":[]},{"title":"Golang 调用 aws-sdk 操作 S3对象存储","slug":"Golang-调用-aws-sdk-操作-S3对象存储","date":"2019-10-25T01:55:52.000Z","updated":"2019-10-25T02:33:06.939Z","comments":true,"path":"2019/10/25/Golang-调用-aws-sdk-操作-S3对象存储/","link":"","permalink":"http://yoursite.com/2019/10/25/Golang-%E8%B0%83%E7%94%A8-aws-sdk-%E6%93%8D%E4%BD%9C-S3%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/","excerpt":"","text":"Golang 调用 aws-sdk 操作 S3对象存储前言因为业务问题，要写一个S3对象存储管理代码，由于一直写Go，所以这次采用了Go，Go嘛，快，自带多线程，这种好处就不用多说了吧。 基础的功能 查看S3中包含的bucket bucket中的文件/文件夹 bucket的删除 bucket的创建 bucket的文件上传 bucket的文件下载 bucket的文件删除 aws-sdk 的安装玩Golang你还能不会那啥？对吧，那啥？那飞机！那飞机场，安上~ 1go get github.com/aws/aws-sdk-go aws-sdk-go 的基础使用构建基础的S3连接访问S3的时候，咱们需要access_key，secret_key，对象存储访问IP这三个参数，我们首先要创建一个aws的config，说白了，我们需要定义aws的配置，这样它才知道要怎么访问，去哪里访问等问题。构建一个S3连接代码如下 123456789101112131415161718192021222324package mainimport ( \"fmt\" \"os\" \"github.com/aws/aws-sdk-go/aws\" \"github.com/aws/aws-sdk-go/aws/credentials\" _ \"github.com/aws/aws-sdk-go/service/s3/s3manager\" \"github.com/aws/aws-sdk-go/aws/session\" \"github.com/aws/aws-sdk-go/service/s3\")func main() &#123; access_key := \"xxxxxxxxxxxxx\" secret_key := \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" end_point := \"http://xx.xx.xx.xx:7480\" //endpoint设置，不要动 sess, err := session.NewSession(&amp;aws.Config&#123; Credentials: credentials.NewStaticCredentials(access_key, secret_key, \"\"), Endpoint: aws.String(end_point), Region: aws.String(\"us-east-1\"), DisableSSL: aws.Bool(true), S3ForcePathStyle: aws.Bool(false), //virtual-host style方式，不要修改 &#125;)&#125; 这时候需要你自己去定义一下access_key，secret_key，end_point这三个参数接下来所有的代码，都是以这个连接模板，为核心，后面我就用同上代替配置，请注意！所有的代码都传到GIT上了，到时候会给出地址，不懂得copy下来吧！ 查看S3中包含的bucket查看所有的bucket 1234567891011121314151617181920212223242526272829303132package mainimport ( 导入包同上)func exitErrorf(msg string, args ...interface&#123;&#125;) &#123; fmt.Fprintf(os.Stderr, msg+\"\\n\", args...) os.Exit(1)&#125;func main() &#123; 配置同上 svc := s3.New(sess) result, err := svc.ListBuckets(nil) if err != nil &#123; exitErrorf(\"Unable to list buckets, %v\", err) &#125; fmt.Println(\"Buckets:\") for _, b := range result.Buckets &#123; fmt.Printf(\"* %s created on %s\\n\", aws.StringValue(b.Name), aws.TimeValue(b.CreationDate)) &#125; for _, b := range result.Buckets &#123; fmt.Printf(\"%s\\n\", aws.StringValue(b.Name)) &#125; &#125; 列出bucket中的文件/文件夹查看某个bucket中包含的文件/文件夹 1234567891011121314151617181920212223242526272829303132333435363738394041424344package mainimport ( \"github.com/aws/aws-sdk-go/aws\" \"github.com/aws/aws-sdk-go/aws/session\" \"github.com/aws/aws-sdk-go/aws/credentials\" \"github.com/aws/aws-sdk-go/service/s3\" \"fmt\" \"os\")func exitErrorf(msg string, args ...interface&#123;&#125;) &#123; fmt.Fprintf(os.Stderr, msg+\"\\n\", args...) os.Exit(1)&#125;func main() &#123; 配置同上 // bucket后跟，go run ....go bucketname bucket := os.Args[1] fmt.Printf(bucket) fmt.Printf(\"\\n\") svc := s3.New(sess) params := &amp;s3.ListObjectsInput&#123; Bucket: aws.String(bucket), &#125; resp, err := svc.ListObjects(params) if err != nil &#123; exitErrorf(\"Unable to list items in bucket %q, %v\", bucket, err) &#125; for _, item := range resp.Contents &#123; fmt.Println(\"Name: \", *item.Key) fmt.Println(\"Last modified:\", *item.LastModified) fmt.Println(\"Size: \", *item.Size) fmt.Println(\"Storage class:\", *item.StorageClass) fmt.Println(\"\") &#125; &#125; bucket的创建创建bucket 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package mainimport ( 导包同上)func exitErrorf(msg string, args ...interface&#123;&#125;) &#123; fmt.Fprintf(os.Stderr, msg+\"\\n\", args...) os.Exit(1)&#125;func main() &#123; 配置同上 bucket := os.Args[1] if len(os.Args) != 2 &#123; exitErrorf(\"Bucket name required\\nUsage: %s bucket_name\", os.Args[0]) &#125; // Create S3 service client svc := s3.New(sess) params := &amp;s3.CreateBucketInput&#123; Bucket: aws.String(bucket), &#125; _, err = svc.CreateBucket(params) if err != nil &#123; exitErrorf(\"Unable to create bucket %q, %v\", bucket, err) &#125; // Wait until bucket is created before finishing fmt.Printf(\"Waiting for bucket %q to be created...\\n\", bucket) err = svc.WaitUntilBucketExists(&amp;s3.HeadBucketInput&#123; Bucket: aws.String(bucket), &#125;) if err != nil &#123; exitErrorf(\"Error occurred while waiting for bucket to be created, %v\", bucket) &#125; fmt.Printf(\"Bucket %q successfully created\\n\", bucket)&#125; bucket的文件上传往某个固定的bucket里传文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package mainimport ( \"github.com/aws/aws-sdk-go/aws\" \"github.com/aws/aws-sdk-go/aws/session\" \"github.com/aws/aws-sdk-go/aws/credentials\" \"github.com/aws/aws-sdk-go/service/s3/s3manager\" \"fmt\" \"os\")func exitErrorf(msg string, args ...interface&#123;&#125;) &#123; fmt.Fprintf(os.Stderr, msg+\"\\n\", args...) os.Exit(1)&#125;func main() &#123; 配置同上 if len(os.Args) != 3 &#123; exitErrorf(\"bucket and file name required\\nUsage: %s bucket_name filename\", os.Args[0]) &#125; bucket := os.Args[1] filename := os.Args[2] file, err := os.Open(filename) if err != nil &#123; exitErrorf(\"Unable to open file %q, %v\", err) &#125; defer file.Close() uploader := s3manager.NewUploader(sess) _, err = uploader.Upload(&amp;s3manager.UploadInput&#123; Bucket: aws.String(bucket), Key: aws.String(filename), Body: file, &#125;) if err != nil &#123; // Print the error and exit. exitErrorf(\"Unable to upload %q to %q, %v\", filename, bucket, err) &#125; fmt.Printf(\"Successfully uploaded %q to %q\\n\", filename, bucket)&#125; bucket的文件下载下载某个bucket中的某个文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051package mainimport ( \"github.com/aws/aws-sdk-go/aws\" \"github.com/aws/aws-sdk-go/aws/session\" \"github.com/aws/aws-sdk-go/aws/credentials\" \"github.com/aws/aws-sdk-go/service/s3\" \"github.com/aws/aws-sdk-go/service/s3/s3manager\" \"fmt\" \"os\")func exitErrorf(msg string, args ...interface&#123;&#125;) &#123; fmt.Fprintf(os.Stderr, msg+\"\\n\", args...) os.Exit(1)&#125;func main() &#123; 配置同上 if len(os.Args) != 3 &#123; exitErrorf(\"Bucket and item names required\\nUsage: %s bucket_name item_name\", os.Args[0]) &#125; bucket := os.Args[1] item := os.Args[2] file, err := os.Create(item) if err != nil &#123; exitErrorf(\"Unable to open file %q, %v\", err) &#125; defer file.Close() downloader := s3manager.NewDownloader(sess) numBytes, err := downloader.Download(file, &amp;s3.GetObjectInput&#123; Bucket: aws.String(bucket), Key: aws.String(item), &#125;)if err != nil &#123; exitErrorf(\"Unable to download item %q, %v\", item, err)&#125;fmt.Println(\"Downloaded\", file.Name(), numBytes, \"bytes\")&#125; bucket的文件删除删除某个bucket里面的某个文件 12345678910111213141516171819202122232425262728293031323334353637383940414243package mainimport ( \"github.com/aws/aws-sdk-go/aws\" \"github.com/aws/aws-sdk-go/aws/session\" \"github.com/aws/aws-sdk-go/aws/credentials\" \"github.com/aws/aws-sdk-go/service/s3\" \"fmt\" \"os\")func exitErrorf(msg string, args ...interface&#123;&#125;) &#123; fmt.Fprintf(os.Stderr, msg+\"\\n\", args...) os.Exit(1)&#125;func main() &#123; 配置同上 if len(os.Args) != 3 &#123; exitErrorf(\"Bucket and object name required\\nUsage: %s bucket_name object_name\", os.Args[0]) &#125; bucket := os.Args[1] obj := os.Args[2] svc := s3.New(sess) _, err = svc.DeleteObject(&amp;s3.DeleteObjectInput&#123;Bucket: aws.String(bucket), Key: aws.String(obj)&#125;) if err != nil &#123; exitErrorf(\"Unable to delete object %q from bucket %q, %v\", obj, bucket, err) &#125; err = svc.WaitUntilObjectNotExists(&amp;s3.HeadObjectInput&#123; Bucket: aws.String(bucket), Key: aws.String(obj), &#125;) fmt.Printf(\"Object %q successfully deleted\\n\", obj)&#125; 代码所在地https://github.com/Alexanderklau/Go_poject/tree/master/Go-Storage","categories":[],"tags":[{"name":"前后端","slug":"前后端","permalink":"http://yoursite.com/tags/%E5%89%8D%E5%90%8E%E7%AB%AF/"}],"keywords":[]},{"title":"程序员如何锻炼自己的产品思维","slug":"程序员如何锻炼自己的产品思维","date":"2019-10-25T01:46:55.000Z","updated":"2019-10-25T02:33:21.668Z","comments":true,"path":"2019/10/25/程序员如何锻炼自己的产品思维/","link":"","permalink":"http://yoursite.com/2019/10/25/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E9%94%BB%E7%82%BC%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BA%A7%E5%93%81%E6%80%9D%E7%BB%B4/","excerpt":"","text":"程序员如何锻炼自己的产品思维写作目的源于一次需求会议被怼，大老板总是说我以技术思维决定一切。后来我一思考，卧槽，果然是这样，每次我都是非常纠结于技术实现和技术细节，总是纠缠在业务实现里面，所以渐渐就养成了那个习惯。思考了一下，有些地方也的确是应该做出一点点改变了，老话说，种一棵树，最早是十年前，其次就是现在，那么我们就开始种树吧。趁着放假读几本产品思维的书，有一点点感悟，所以将此文写下，方便自己，也方便急于转型的各位程序员老哥。 个人技术背景1.菜逼一个，看博客就知道了。 2.掌握技术：后端： Python，Golang，Java移动端：OC（大学时候兼职IOS开发）前端：基础的React和Vue框架 3.算法技术：渣渣 4.没有任职过任何产品岗位 个人分析优点技术涉及面广，做项目多，一直在项目第一线，熟悉项目业务，思维活跃，善于解决和发现问题。 缺点算法能力差，前端能力差，抽象思维较弱，容易钻牛角尖，对项目整体了解不够透彻，只了解某些模块和部分。 什么是产品思维？理论上的产品思维1.把握关键点的能力 2.出方案，协调资源，说服团队把资源倾斜到关键点上的能力 3.评估关键点进展程度的能力 大白话解释1.首先用户就是一切，一切为了用户爽 2.反向思维，逆推解决问题 3.换位思考啊大哥，你不仅仅是产品人员，你还得是老板，用户，程序员balabala 4.脑子里对业务and产品都算是有了解（当然不能说像程序员一样） 其他来源对产品思维的解释1.从人性本质挖掘需求 说白了就是你要从人去思考问题，也就是说，你要人的表面挖掘到人的内心，类似挠痒痒，不能挠痒痒之后把皮整破了，这就是你满足了表面需求，但是破坏了底层需求2.从赚钱的角度思考 说白了就是追逐利益，想法儿怎么搞钱，例如扫码送东西，例如扫码给红旗，例如十一的时候给微信加国旗，这都是从逐利的思想去发觉需求3.沟通能力 我缺乏哪些技能？粗略看一下，其实缺乏的东西看起来很简单 对整体架构了解不多 逆向思维较差，不能从用户需求去理解问题，只单纯纠结能不能实现功能 评估项目和关键点能力不足 不能够和其他程序员有很好的沟通 平常和业务纠缠太多了，我这种Code monkey每天都去思考这个功能怎么实现，用什么技术更牛逼，怎么优化之类的，纠结技术，功能，细节等等。举个例子，我作为一个代码工程师工程师思维关注技术至上，技术水平代表实力，向于在产品中使用先进、流行的技术，因为掌握先进主流的技术可以提高他的身价。产品思维关注的是，这技术能给用户带来什么价值？有什么商业价值？所以我需要跳出这个怪圈，学会用产品的思维去思考问题，这样也能够开拓自己的眼界，无论是技术还是其他的路，都可以走的更远。 我该如何去补强这些技能？我理解的产品思维每一个项目都是产品。我们可以把工作当中的任何一个输出成果当做产品，用产品思维来完成这个成果。比如，我现在正在开发一个分布式的同步备份工程，将之称为产品。按照产品思维来策划这个工程，你要思考：我为什么要做这个产品？希望得到什么？用户是谁？谁在用这个？他们希望怎么去用？干系人有哪些？他们的期待是？使用场景：现有的web？还是独立开发APP？或者是普通的云计算服务？或者是普通存储服务？或者是类似同步服务？用户的关注点：怎么用？好操控么？用着舒服么？界面看着开心么？思考一下，产品思维的确和工程师思维不太一样，我也不能总是在工程师思维这个怪圈中徘徊 理论上的补强手段保持自己对于不同产品、不同领域的好奇心和敏感度很多时候我都忙于自己当下的工作，很难有机会接触到不同领域不同产品。很可能渐渐地就失去了对于产品的好奇心和敏感度，所以必须要让自己走出去，多去接触，或者看一看别人的产品or项目如何设计，思考他们是怎么做产品的？他们为什么这么做 ？如果我来做能怎样做？通过这样的思考和练习，来保持自己对产品的好奇心和敏感度 向上拓展自己的能力，不能停留于技术人员or产品经理一直纠缠与技术实现细节，总归是只有一层，如果满足这一层，也就是写代码的工具，或者是模块添加人员，也就没有办法建立起来自己的核心竞争力，笑傲江湖里面，剑宗气宗之争也是这一点，剑气双休才是最重要的。所以不仅仅是技术要抓，思想也要抓。 强化自己逻辑思维分析能力在逻辑思维方面，我想没有谁比得过程序员，程序员本来就是逻辑性很强的工作，这一点其实我认为更重要的是换位分析，易地而处的一种状态。我们往往分析自己的工作比较容易，但是涉及大局分析，就有些力不从心，这个我认为还是要针对性训练。 分解问题的能力其实这个在写代码的时候也经常预见到，不是么，一个大问题细化为好几个小问题，换算成产品思维也即是：1.产品有哪些功能？ 2.这些功能下面又分哪些模块？ 3.具体的应用场景在哪里？ 4.产品模块之间相互的联系是什么？ 5.谁在用这些产品？ 6.业务部门之间的需求是否互相耦合？是否已经存在重复需求？ 这里只是举个例子，具体问题具体分析，将自己想象成产品经理，先不要思考问题怎么解决，看看产品是怎么做的，再去对比思路思考解决问题。 用户行为分析能力什么是用户行为？关键就是用户用着你这个产品产生的行为，再去产生其他行为，这是用户增长和用产品化的重要组成部分。首先我们需要找出，关键用户行为，也就是，用户在使用产品时，是奔着你产品的什么方面来的，拿我正在做的项目举个例子，同步备份模块，干嘛的，同步备份文件的，特点呢？分布式，速度快，那不就完了！关键行为就是同步备份，这才是用户的关键行为。首先我们要考虑为什么会产生关键行为，也就输确定产品的价值，产品的价值就是用户愿不愿意给这个产品花钱，愿不愿意花钱去买我们的东西，解决痛点是第一位，但是在这之前，有没有类似的产品做了？人家做的好不好？谁的效率高？谁更牛逼？牛逼在哪？这才是要去分析的地方。 场景分析能力说白了，角色扮演，你把自己想象成一个用户，现在我想要一个产品，思考一下1.产品包含哪些场景 2.产品涉及哪些角色 3.场景会被第三方影响么？如果会，该如何去降低它？ 举个例子，同步备份的产品用在普通用户手中，普通用户的网很慢，同步时断时续，这就是第三方的缘故，但是我们的产品是单节点，也就是说只能一点点下，不能分布式，这就坑了，用户会觉得，你这怎么那么卡，你看看人迅雷，都能断点，都能分布式，你这个，get out，这就是第三方影响使用场景。再举个例子哈：朱啸虎先生在杭州的一次演讲中提到了维诺城。维诺城是在地铁口放置终端，用户出了地铁口之后可以在上面打印周围商家的优惠券。维诺城最初的生意非常好，因为地铁人流大，又是优惠券提供，在大众点评美团还没崛起的时候，它确实是很方便的产品。然而现在一方面因为美团这些APP的强势崛起，另一方面因为地铁提高了租金，更多的商家进场，甚至地铁公司本身都要来抢这个生意，维诺城的生意就下坡路了。 维诺城的例子说明什么？说明如果产品的主要场景容易受限于特殊的场地和时间特性，而这个场景进入的门槛比较低或是由第三方来控制，那么这个产品从场景上来说是有很高风险的；作为产品经理就要尝试思考有没有办法去降低这些影响，或是去发现自己产品不过度依赖这个场景的核心竞争力？ 数据分析能力数据这玩意，永远是支撑一个产品，或者是一个理论的重要依据。如何在通过数据去引导自己的产品思维 1、明确数据指标的定义、口径和使用场景。 要能清楚地和开发人员描述数据指标到底是什么，有哪些维度，在哪个页面或哪个场景之下发生； 2、层层剥离，穷举指标 产品经理为了保证数据的准确性，要尽可能地将指标拆解，拆解到不能拆解为止。同时也要分清哪些是核心指标，哪些是主要指标，哪些是次要指标； 3、数据指标和用户结合 新用户做了什么？老用户做了什么？付费用户做了什么？非付费用户又做了什么？流失用户在流失之前做了什么？要回答这些问题就要将数据指标和不同的用户结合起来分析","categories":[],"tags":[{"name":"其他技术","slug":"其他技术","permalink":"http://yoursite.com/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"}],"keywords":[]},{"title":"新旧博客迁移的一点感悟","slug":"新旧博客迁移的一点感悟","date":"2019-10-24T09:50:37.000Z","updated":"2019-10-25T06:22:26.477Z","comments":true,"path":"2019/10/24/新旧博客迁移的一点感悟/","link":"","permalink":"http://yoursite.com/2019/10/24/%E6%96%B0%E6%97%A7%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%82%9F/","excerpt":"","text":"算是日记吧其实自己一直在cnblog上更新自己的博客，从16年3月入行到现在，已经过去了三个春秋，发觉自己的技术还是个渣渣，最近生活真的忙成一团，工作也很忙，生活也很忙，有时候饭都不容易吃上，感觉自己学习真的学不动了，不知道自己是不是懈怠了，运动，音乐什么的，也停下来了，感觉真的缺少了一点点乐趣。不过说真的，自己也真的该动起来了，因为时间不等人啊，已经入行这么久，跌跌撞撞像个摇摆人，所以未来我还是要多学习，多更新我的博客，将自己的技术或者是一些感悟，哪怕是一些灵光一闪的理想，都记录下来，哈哈，这样会不会好一些呢？会不会明天就是更好的那一天呢？ 算是自己我介绍吧渣渣一个，技术又全又杂，精通的少，各种都会一点，但是真正就是个渣渣，哈哈，现在孑然一生，18年年底被踹，重新出发，想想自己当时为了感情选择留在这个陌生的城市，现在已经爱上了这座城市，这座美丽的西南大都会。我想我会留下来的吧，我会留下来的？我也不确定吧，现在要慢慢出发，重新出发，我想我会越来越好的。 算是结尾吧可能你因为一些别的原因走到我博客来，其实欢迎你，欢迎你听一个24岁的家伙碎碎念那么久，未来大部分应该会更新技术，或者是我的一些奇特爱好，哈哈，希望你们会喜欢，我爱你们。","categories":[],"tags":[{"name":"其他技术","slug":"其他技术","permalink":"http://yoursite.com/tags/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"}],"keywords":[]}]}